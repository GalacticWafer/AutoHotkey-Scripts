#SingleInstance, force

str = 
(
Edit: TLDR ~ Here are some tips:	
Do personal projects.
Spend most of your free time coding.
Research and use your debugger to the fullest.
Practice drafting/asking extremely direct and narrow questions (with error codes)
Google the shit out of EVERYTHING
copy paste is an art that helps you get started with a working example
Keep all your code,and keep it organized.
Use new scary tools as necessary which is not so scary when done with the other tips.
From one beginner to another, the truth is they're telling you that because it's the only good short and sweet answer.
This semester I took software development at uni, and this was the first time I actually had to work as a team. It made me realize that there are widely different levels of beginner. While I know for a fact that I'm still fresh, I noticed several things that I do which nobody on my team does. In order of what I perceive being most important, here are some of the things I've noticed that I do which nobody else on the team does:
Personal projects. I've got AHK scripts which I'm grateful to have learned on as a first language (cuz the syntax is simpler than Java I use now). I try to create Monopoly and BattleShip every time I want to learn a new language. Until you practice taking ideas from pipe dreams to code, you're only stunting your growth. It forces you outside of the comfort zone, and gives more practice with other techniques that follow.
More than 75`% of my free time is coding. If it's not the semester project, it's something I'm geeking out on for myself. This is clearly related to #1, but the combination of them gives you the hours of experience required to get comfortable with a language. They say it takes ten thousand hours to become an expert in something. It's probably more than that for CS, but you get the point.
Get familiar with your debugger or you're not being serious about the craft. I spend more than 50`% of my time in debug mode, and I actually researched how to use the debugger to the fullest. You will shave off hours/day sometimes by doing this. It bugs me when I see teammates repeatedly try to run the same exact code without changing anything, instead of setting some logical first-guess break points and entering a debug session.
I try to ask questions in the most narrow and specific way/scenario possible. I have gotten so much better at this over the last couple years, and it really shows. I could still get better though. I takes me sometimes a half hour or more to really draft up a good question. More people respond/are able to understand the question as I get better at doing this. In short, it takes experience to learn how to ask for help in the best way. Also, always include the error code you're getting and please show some proof that you at least googled your error code.
As soon as I realize idk/remember how to do something, I google it. This isn't a closed-note quiz or something, it's real life! Google the shit out of everything. Look at the the top three Stack overflow posts, look at the API documentation, look at the other website with coding examples for whatever language you're learning which consistently shows up on the first page for your searches.
I'm absolutely not afraid to copy-paste code. I use a scratch file to tinker with ideas (Thank you IntelliJ) until I have a minimum working example, then implement my use case with it. This becomes more efficient use of time as you gain experience taking abstract thoughts and turning them into code that does what you want.
Keep everything. Be organized and start using GitHub. You will eventually start reusing some of your own code, or realize how to fix something in the past/make it better.
Don't be scared to learn/use new tools and concepts. We are too fresh to afford the luxury of ignoring things we just ought to be teaching ourselves. This doesn't mean go down a rabbit hole, but sometimes learning just enough to get you by will be necessary.
I hope this list helps.
)
MsgBox % prependSpace(str,	 80, 20, "                          ")
prependSpace(str, maxLength, minLength, leadingSpace := "") {
	if(maxLength - StrLen(leadingSpace) < minLength) {
		return
	}
	maxLength -= StrLen(leadingSpace)
	str := wordWrap(str, maxLength)
	for index, line in StrSplit(str, "`n") {
		maxLineLength := maxLineLength > StrLen(line) ? maxLineLength : StrLen(line)
	}
	shortenedLength = maxLength - maxLineLength
	if(maxLineLength - 10 < shortenedLength) {
		str := wordWrap(str, maxLength - minLength)
	}
	for index, line in StrSplit(str, "`n") {
		out .= leadingSpace line "`n"
	}
	return out
}

wordWrap(str, maxLength) {
	allText := str
	loop {
		line := SubStr(allText,1, maxLength - 1)
		newLineIndex := InStr(line, "`n")
		while(newLineIndex) {
			out .= SubStr(line, 1, newLineIndex)
			line := SubStr(line, newLineIndex + 1)
			newLineIndex := InStr(line, "`n")
		}
		if(line SubStr(allText, maxLength) == allText) {
			wordBoundary := false
			lineSplitIndex := maxLength
			chars := StrSplit(line)
			while(!wordBoundary) {
				char := chars[lineSplitIndex]
				if(char == A_Tab or char == A_Space) {
					wordBoundary := true
					break
				}
				lineSplitIndex --
				if(!lineSplitIndex) {
					out .= line
					break
				}
			}
			part1 := SubStr(line, 1, lineSplitIndex)
			part2 := SubStr(line, lineSplitIndex + 1, StrLen(line))
			out.= part1 "`n"
			line := part2
			if(strLen(line) + StrLen(allText) <= maxLength) {
				out .= line allText
				break
			}
		}
		allText := line SubStr(allText, maxLength)
	}
	return out
}
